import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * Decode class. The main class to be run in order to decode a file.
 * @author Zdenek Plesek
 * @version 1.0
 */
public class Decode {
	private static BufferedInputStream in;
	private static BufferedOutputStream out;
	
	/**
	 * The main method of the Decode class. Call from terminal.
	 * This method handles input from terminal and calls auxiliary methods to fetch Huffman tree
	 * and perform actual decoding.
	 * @param args: String[], passed from console.
	 */
	public static void main(String[] args) {
		long startTime = System.currentTimeMillis(); 
		switch(args.length) {
		case 3:
			if(args[1].substring(0, 11).equals("-usingTree:")) {
				TreeNode root = extractTree(args[1].substring(11));
				decode(root, args[0], args[2]);
				break;
			}
			if(args[1].substring(0, 16).equals("-usingGenerated:")) {
				TreeNode root = makeTree(args[1].substring(16));
				decode(root, args[0], args[2]);
				break;
			}
			break;
		default: 
			System.out.println(
					"This command takes three arguments.\n"
					+ "The first argument is the name of the file to be decoded.\n"
					+ "The second argument specifies where will the tree be taken from.\n"
					+ "    It is prefaced with either\n"
					+ "    -usingTree:\n"
					+ "    or\n"
					+ "    -usingGenerated:\n"
					+ "    In the first case, specify a .tree file. Huffman tree will be generated by parsing it.\n"
					+ "    In the second case, specify a file. Huffman tree will be created based on its bytes.\n"
					+ "The third argument is the name of the new file.");
			break;
		}
		long timeElapsed = System.currentTimeMillis() -  startTime;
		System.out.println(timeElapsed+" miliseconds elapsed.");
	}
	
	/**
	 * Private method called to decode a file.
	 * @param rootTreeNode: TreeNode, root node of the Huffman tree.
	 * @param inputFile: String, name of the file to be decoded.
	 * @param outputFile: String, name of the resulting file.
	 */
	private static void decode(TreeNode rootTreeNode, String inputFile, String outputFile) {
		Decoder dec = new Decoder(rootTreeNode);
		try {
			in = new BufferedInputStream(new FileInputStream(inputFile));
			out = new BufferedOutputStream(new FileOutputStream(outputFile));
			
		} catch (Exception e) {
			System.out.println(e);
			System.exit(126);
		}
		Integer b;
		String parsedB;
		Integer[] bytes;
		try {
			b = in.read();
			EOF:
			while(b>-1){				
				parsedB = Decoder.intToStringBase2(b);
				bytes = dec.decode(parsedB);
				for(Integer byteToWrite: bytes) {
					if(byteToWrite == Integer.MIN_VALUE) {
						break EOF;
					}
					out.write(byteToWrite);
				}
				b = in.read();
			}
		}catch(Exception e) {
			System.out.println(e);
			System.exit(1);
		}
		try {
			in.close();
			out.close();
		} catch (IOException e) {
			System.out.println(e);
			System.exit(1);
		}
	}
	
	/**
	 * Private method that can be used to build a Huffman tree from an unencoded file.
	 * @param originFile: String, name of the file according to which the tree will be built.
	 * @return TreeNode, returns the root node of the Huffman tree.
	 */
	private static TreeNode makeTree(String originFile) {
		String treefile = originFile.substring(0, originFile.lastIndexOf('.'));
		treefile = treefile.concat(".tree");
		TreeBuilder tr;
		try {
			tr = new TreeBuilder(originFile);
			
			
			BufferedOutputStream ot = new BufferedOutputStream(new FileOutputStream(treefile));
			TreeNode root = tr.buildTree();
			ot.write(root.generateOutputContent());
			ot.close();
			return root;
		} catch (Exception e) {
			System.out.println(e);
			System.exit(126);
		}
		
		return null;
	}
	
	/**
	 * Private method to parse a tree from a .tree file created as a product of makeTree method.
	 * @param originFile: String, name of the file from which the tree will be parsed.
	 * @return TreeNode, returns the root node of the Huffman tree.
	 */
	private static TreeNode extractTree(String originFile) {
		TreeRebuilder tr = new TreeRebuilder();
		BufferedInputStream ot = null;
		try {
			 ot = new BufferedInputStream(new FileInputStream(originFile));
		} catch (Exception e) {
			System.out.println("Cannot open the .tree file.");
			System.out.println(e);
			System.exit(126);
		}
		try {			
			Integer read;
			read = ot.read();
			while(read>-1) {
				byte tmp = (byte) read.intValue();
				tr.nextByte(tmp);
				read = ot.read();
			}
		} catch(Exception e) {
			System.out.println(e);
			System.exit(1);
		}
		
		try {
			return tr.getTree();
		} catch(Exception e) {
			System.out.println(e);
			System.exit(1);
		}
		return null;
	}
}
